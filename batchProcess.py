import json

def loadJson(filename):
    with open(filename, "r") as toBeSerialized:
        serializedData = json.load(toBeSerialized)
    return serializedData

def injectFractionToExperiment(aVectorOfReturn, fraction, retrunStyle):
    
    tmp = [1]

    for eachReturn in aVectorOfReturn:
    
        if retrunStyle == 0:
            calResultOfReturn = eachReturn
        
        elif retrunStyle == 1:
            calResultOfReturn = (1+eachReturn)
    
        last_return = tmp[-1]
        tmp.append((1-fraction) * last_return + (fraction*calResultOfReturn*last_return))
    
    return tmp


def processBatchPriceAndDumpToJson(fraction, retrunStyle, experiments, flag, fileNameWithoutDotJson):
    
    pricedDatas = dict()

    for count, experiment in enumerate(experiments):
    
        if flag == 0:
            # vectorOfReturn = experiment
            aVectorOfReturn = experiments[experiment]

        elif flag == 1 or flag == 2:
            aVectorOfReturn = experiment
    
        pricedDatas[str(count)] = injectFractionToExperiment(aVectorOfReturn, fraction, retrunStyle)

    with open(fileNameWithoutDotJson+"_price.json","w") as file:
        json.dump(pricedDatas, file, indent = 4)


def MDD(prices, maxDrawdown=0):

    high = prices[0]

    for price in prices:
        
        if price == 0:
            return -1

        elif high > price:
            maxDrawdown = min(maxDrawdown, (price - high) / high)
        
        else:
            high = price

    return maxDrawdown


def processBatchMDDAndDumpToJson(fileNameWithoutDotJson):
    
    tmp = dict()

    pricedDatas = loadJson(fileNameWithoutDotJson+"_price.json")
    
    for count, key in enumerate(pricedDatas):
        tmp[str(count)] = MDD(pricedDatas[key])
    
    with open(fileNameWithoutDotJson+"_MDD.json","w") as file:
        json.dump(tmp, file, indent = 4)


def processBatchFinalRtnAndDumpToJson(fileNameWithoutDotJson):
    
    tmp = dict()
    datas = loadJson(fileNameWithoutDotJson+"_price.json")
    
    for count, data in enumerate(datas):
        prices = datas[data]
      
        tmp[str(count)] = prices[-1] - prices[0]

    with open(fileNameWithoutDotJson+"_FinalRtn.json","w") as file:
        json.dump(tmp, file, indent = 4)


if __name__ == "__main__":
    MDDTestData = [1,
        0.988,
        0.9887291685393258,
        0.9794191615570959,
        0.9718097293294281,
        0.9683246185759709,
        0.9829701931394745,
        0.975800428083729,
        0.972301005858877,
        0.9759780714810343,
        0.9782007368701007,
        0.980790301002615,
        0.9824061773005045,
        0.9907363020701038,
        0.9938844596894125,
        0.9950941812164207,
        0.9885008276409406,
        0.9934157640269801,
        0.9641266351373426,
        0.9570943146192165,
        0.9601570164259978,
        0.953695372562309,
        0.9581172121596753,
        0.9674983187680511,
        0.9634842299986943,
        0.960777799698608,
        0.9656094344629754,
        0.964812950276452,
        0.9628220664108023,
        0.9639939798752502,
        0.9615536867984056,
        0.9594069622883441,
        0.9617893895829863,
        0.9523799817307063,
        0.9520258189723032,
        0.9628651288264527,
        0.9698429582686083,
        0.9641168127361698,
        0.9675008627488738,
        0.9630698863205781,
        0.9680113302913766,
        0.9683566928243107,
        0.9733417040609125,
        0.97192428230284,
        0.9712231484853174,
        0.9743310625604704,
        0.9802266512444727,
        0.9690283043499526,
        0.9718463573681955,
        0.9691164378254403,
        0.9698472277435104,
        0.9673625985993559,
        0.9593243490799863,
        0.9565529676270885,
        0.9652666764124798,
        0.9711992076427136,
        0.9651952120457447,
        0.9620924436937992,
        0.9566134087602209,
        0.9562576717119096,
        0.9619304444952557,
        0.9573376370992901,
        0.9550116980251178,
        0.9580976276546396,
        0.9537679746456608,
        0.9592312101355415,
        0.9537684696846,
        0.9548977894665416,
        0.9527191561187276,
        0.9394703713282673,
        0.9551286188722818,
        0.955863967741099,
        0.9652230124077448,
        0.9620659405162586,
        0.9580743903375208,
        0.9584273055792981,
        0.9508214728249821,
        0.9493546926048515,
        0.9550991515448314,
        0.9566727010380697,
        0.950333922766607,
        0.9545371716819502,
        0.9611944565716295,
        0.9678277053941634,
        0.9392929957260352,
        0.9359225596746663,
        0.9318265993433724,
        0.9359479918867174,
        0.9416113280994429,
        0.9426482083383856,
        0.9306208604635609,
        0.9323689261376406,
        0.9270591641176025,
        0.9388569530722466,
        0.9363609535767994,
        0.938119801364373,
        0.939551940217098,
        0.9447372032833905,
        0.9354946209101641,
        0.9402710563328825,
        0.939531170911506,
        0.9356486050131696,
        0.925677169703206,
        0.9291779124540837,
        0.9355728427927382,
        0.9434573650709304,
        0.9315524470866302,
        0.9241598863017177,
        0.9330209153283353,
        0.9249929080281001,
        0.9190460445321231,
        0.9290757587670172,
        0.9331849845683445,
        0.9426221398024426,
        0.9419421441778915,
        0.9419421441778915,
        0.9487568908209871,
        0.9457949180886678,
        0.9379728368575567,
        0.9487012593662982,
        0.9515890134435889,
        0.9494179291862259,
        0.9570411966764566,
        0.9538980719042138,
        0.9513835113863638,
        0.9486350701312476,
        0.9577055634866931,
        0.9591738884783777,
        0.9584819526328164,
        0.9633020418613688,
        0.9598474414353831,
        0.9654525398634444,
        0.9628299672924719,
        0.9614278531744078,
        0.9598009217021886,
        0.9580629188724087,
        0.9565849676699949,
        0.9573386406748258,
        0.9153606349821005,
        0.9043908561406195,
        0.9009286482005475,
        0.9020252271533638,
        0.8996474080874581,
        0.8999823603444072,
        0.8993189356629483,
        0.8986282587203591,
        0.9048129355597874,
        0.9119014888779204,
        0.9170996605806594,
        0.9141104373108851,
        0.9137703031946764,
        0.9107692891462896,
        0.8977044607226738,
        0.9003514428065058,
        0.8865600129539037,
        0.8859141128393874,
        0.8834255772478231,
        0.8840917495260135,
        0.8812497007192946,
        0.8791086242238417,
        0.8807268064702005,
        0.8876266624304943,
        0.8792851106630752,
        0.8772454307037676,
        0.8759183976158667,
        0.8774854075932529,
        0.8768114988002212,
        0.8726250980478567,
        0.8719923054142926,
        0.8764812416429899,
        0.8740192030169471,
        0.8724160637380447,
        0.8677570518163573,
        0.8740350854434114,
        0.8814009994459269,
        0.8786038260261977,
        0.8808706550351063,
        0.8894954260111412,
        0.8811198173102678,
        0.8837178977166544,
        0.8908136326012618,
        0.8849112272204784,
        0.8820665440767634,
        0.8768634830848292,
        0.8700471852955947,
        0.8677674215851141,
        0.859277852372715,
        0.8530910518356314,
        0.8450582316238022,
        0.8508900188147986,
        0.8546848159922167,
        0.8584001779788986,
        0.8543016834269475,
        0.8525985388567927,
        0.8499953756115493,
        0.850308478984856,
        0.8130236012468822,
        0.806267823649711,
        0.7975363918503302,
        0.7914567427061727,
        0.792944299957524,
        0.7913634780943499,
        0.7898431246142672,
        0.7921400851790577,
        0.7892976733725496,
        0.789918760066351,
        0.7874891393329861,
        0.787190963833627,
        0.7851982370124011,
        0.7840731768519058,
        0.7794481510092466,
        0.7835674849761047,
        0.7850402142249755,
        0.7935332313289625,
        0.7961548844664834,
        0.7987025800967762,
        0.8078380458601642,
        0.8146879536387733,
        0.8126256198332131,
        0.8132253577241367,
        0.8105747056005275,
        0.8149582936084152,
        0.814364558669464,
        0.8152796189658802,
        0.8158813155740821,
        0.8104311461813807,
        0.8153349913713654,
        0.8116009067136354,
        0.8137664978929422,
        0.7897740138737255,
        0.7891225677604972,
        0.7981484584744338,
        0.7987765097204464,
        0.8078709963620192,
        0.8088275646764973,
        0.8144632664174691,
        0.8119765382058752,
        0.8092443271582035,
        0.813313918509285,
        0.8130112900744909,
        0.8140008590829562,
        0.8103223808495144,
        0.8087713343291152,
        0.8094085481076776,
        0.8129508340271576,
        0.8039641765485044,
        0.8039641765485044,
        0.8045976028694214,
        0.8109010417167599,
        0.8019370433961084,
        0.8034442985620095]
    print(MDD(MDDTestData))